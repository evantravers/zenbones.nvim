local helpers = require "shipwright.transform.helpers"

local base_template = [[
# background/text
"ui.background" = { fg = "p11", bg = "p2" }
"ui.background.separator" = { fg = "p7" }
"ui.text" = { fg = "p11" }
"ui.text.focus" = { fg = "p12", modifiers = ["bold"] }

# popups/menus
"ui.window" = { fg = "p7" }
"ui.popup" = { fg = "p12", bg = "p4" }
"ui.popup.info" = { fg = "p12", bg = "p2" }
"ui.text.info" = { fg = "p12", bg = "p2" }
"ui.help" = { fg = "p12", bg = "p2" }
"ui.menu" = { fg = "p11", bg = "p4" }
"ui.menu.selected" = { fg = "p12", modifiers = ["bold"] }
"ui.menu.scroll" = { fg = "p8", bg = "p4" }
"ui.picker.header.column" = { underline.style = "line" }

# cursor/selection
"ui.cursor" = { fg = "p2", bg = "p11" }
"ui.cursor.insert" = { fg = "p2", bg = "keyword" }
"ui.cursor.select" = { fg = "p2", bg = "p12" }
"ui.cursor.match" = { fg = "p12", modifiers = ["bold"] }
"ui.cursor.primary" = { fg = "p2", bg = "p11", modifiers = ["bold"] }
"ui.cursor.primary.insert" = { fg = "p2", bg = "keyword", modifiers = ["bold"] }
"ui.cursor.primary.select" = { fg = "p2", bg = "p12", modifiers = ["bold"] }
"ui.selection" = { bg = "p4" }
"ui.selection.primary" = { bg = "p5" }
"ui.cursorline.primary" = { bg = "p3" }
"ui.cursorcolumn.primary" = { bg = "p3" }

# line numbers / diff
"ui.linenr" = { fg = "p7" }
"ui.linenr.selected" = { fg = "p11" }
diff = { fg = "p8" }

# bufferline/statusline
"ui.bufferline" = { fg = "p11", bg = "p4" }
"ui.bufferline.active" = { fg = "p2", bg = "p11" }
"ui.statusline" = { fg = "p11", bg = "p4" }
"ui.statusline.inactive" = { fg = "p11", bg = "p2" }
"ui.statusline.normal" = { fg = "p2", bg = "p11" }
"ui.statusline.insert" = { fg = "p2", bg = "keyword" }
"ui.statusline.select" = { fg = "p2", bg = "p12" }
"ui.statusline.separator" = { fg = "p7" }

# virtual
"ui.virtual" = { fg = "p6" }
"ui.virtual.ruler" = { bg = "p3" }
"ui.virtual.inlay-hint" = { fg = "p7", underline.style = "dotted" }
"ui.virtual.jump-label" = { fg = "p12", modifiers = [
  "bold",
], underline = { style = "curl", color = "info" } }

# diagnostics
error = { fg = "error", modifiers = ["bold"] }
warning = { fg = "warning", modifiers = ["bold"] }
info = { fg = "info", modifiers = ["bold"] }
hint = { fg = "info", modifiers = ["bold"] }
"diagnostic.error" = { fg = "error", modifiers = ["bold"] }
"diagnostic.warning" = { fg = "warning", modifiers = ["bold"] }
"diagnostic.info" = { fg = "info", modifiers = ["bold"] }
"diagnostic.hint" = { fg = "info", modifiers = ["bold"] }
# "diagnostic.unnecessary" = {}
# "diagnostic.deprecated" = {}

# code
comment = { fg = "info" }
keyword = { fg = "keyword" }
operator = { fg = "keyword" }
string = { fg = "string" }
constant = { fg = "constant" }
"string.special.symbol" = { fg = "constant" }
variable = { fg = "p10" }
namespace = { fg = "p10" }
punctuation = { fg = "p9" }
"punctuation.delimiter" = { fg = "p8" }
function = { fg = "p11" }
attribute = { fg = "p10" }
tag = { fg = "keyword" }
label = { fg = "p12" }
constructor = { fg = "p12" }
type = { fg = "p12" }

# markup
"markup.bold" = { modifiers = ["bold"] }
"markup.italic" = { modifiers = ["italic"] }
"markup.strikethrough" = { modifiers = ["crossed_out"] }
"markup.heading" = { fg = "p12", modifiers = ["bold"] }
"markup.heading.marker" = { fg = "p8" }
"markup.list" = { fg = "p8" }
"markup.link.url" = { underline.style = "line" }
"markup.link.label" = { underline.style = "dotted" }
# "markup.link.text" = {}
"markup.quote" = { fg = "p10" }
# "markup.raw" = {}

[palette] # https://www.radix-ui.com/colors

# grayDark
p1 = "$p1"
p2 = "$p2"
p3 = "$p3"
p4 = "$p4"
p5 = "$p5"
p6 = "$p6"
p7 = "$p7"
p8 = "$p8"
p9 = "$p9"
p10 = "$p10"
p11 = "$p11"
p12 = "$p12"

error = "$bright_red"
warning = "#ff801f"
info = "#3b9eff"

string = "#33b074"
constant = "#9a5cd0"
keyword = "#ae8c7e"
]]

local function helix_toml(colors)
	local text = helpers.apply_template(base_template, colors)

	return helpers.split_newlines(text)
end

---@diagnostic disable: undefined-global
-- selene: allow(undefined_variable)
run(
	{ specs, p, term },
	transform.colorscheme_to_term_colors,
	helix_toml,
	{ prepend, "# This file is auto-generated by shipwright.nvim" },
	{ overwrite, string.format("extras/helix/%s.toml", name) }
)
-- selene: deny(undefined_variable)
---@diagnostic enable: undefined-global
